# Core Gameplay Prototype Requirements**

## Audio: The prototype uses at least two different kinds of audio.**
What we did:
1. Continuously looping background sound (e.g. music or environmental audio) from an audio asset file.
2. Sound effects or voice clips triggered in response to player input or game events, also from an audio asset file.
3. Dynamically-generated sounds (as opposed to sounds saved in asset files) created using a library like Tone.js


## Visual: The prototype uses at least two different kinds of display primitives. Basic geometric primitives like squares/circle or a scene's flat background color would not count here.**
What we did:
1. Image-based assets using sprites may make spritemap later to save space.
2. Particle emitter to create the starfield/moving through space effect.
3. (Not Completed Yet): If possible we want to add a shader to the background to make it feel more like a wormhole/time anomaly.

## Motion:
What  we did:
1. Tweens on the turret sprite to rotate it before firing a bullet
2. Bullet objects, which uses physics to move instead of Tweens
3. Time Fissures use a tween to grow and become a threat to the ship.

## Progression: 
What we did:
1. We have a difficulty variable that is based on time. As the difficulty goes up, the chance of a Time Fissure spawning increases. Higher Difficulty sees an increasing onslaught of Time Cracks. Currently this is linear, but I want to change to a different curve.
2. (Not Completed Yet): We want to have multiple styles of time fissures, which start to appear at higher difficulty and other events start based on the difficulty counter as well. 

## Prefabs:
What we did:
1. DefenderScene which extends the standard Phaser Scene, is our base scene, it loads our assets, and it stores functions all of the scenes need, it's currently primarily used in the title. DefenderGameScene Extends DefenderScene, and adds the aspects of the gameplay that aren't necessary for the Base DefenderScene. This contains timers, groups, colliders, and the necessary functions to run the game.
2. LaserGroup which extends Phaser.Physics.Arcade.Group and creates multiples of: Laser which extends Phaser.Physics.Arcade.Sprite.
3.(Not Completed Yet): Different Types of Lasers/Blasts (extends Laser object)
4.(Not Completed Yet): Power Up Class, with different powerups extending the base class.
4.(Not Completed Yet): Ship Stats and Which weapon using JSON file (maybe? might prove unneccesary) 
